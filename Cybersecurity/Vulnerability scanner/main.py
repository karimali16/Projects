import socket
from concurrent.futures import ThreadPoolExecutor

def scan_port(ip, port):
    """Attempt to connect to a port on a given IP address."""
    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as sock:
        sock.settimeout(1)  # Set timeout for the connection attempt
        result = sock.connect_ex((ip, port))  # Attempt to connect
        return port, result == 0  # Return port and whether it's open

def scan_ports(ip, port_range):
    """Scan a range of ports on the specified IP address."""
    open_ports = []
    with ThreadPoolExecutor(max_workers=100) as executor:
        futures = {executor.submit(scan_port, ip, port): port for port in port_range}
        for future in futures:
            port, is_open = future.result()
            if is_open:
                open_ports.append(port)
                print(f"Port {port} is open.")

    return open_ports

def main():
    target_ip = input("Enter the target IP address: ")
    start_port = int(input("Enter the starting port: "))
    end_port = int(input("Enter the ending port: "))

    port_range = range(start_port, end_port + 1)
    print(f"Scanning {target_ip} from port {start_port} to {end_port}...")
    
    open_ports = scan_ports(target_ip, port_range)
    
    if open_ports:
        print(f"Open ports: {open_ports}")
    else:
        print("No open ports found.")

if __name__ == "__main__":
    main()