#!/bin/bash
# Store the current commit hash from the BITBUCKET_COMMIT environment variable
commit=$BITBUCKET_COMMIT

# Get the commit hash of the commit right before the master branch's latest commit (the parent of the current master commit)
commit1=$(git rev-parse master^)

# Get the second most recent commit hash from the git log (skipping the latest commit, i.e., 1 commit back)
commit2=$(git log -1 --skip=1 --format="%h")

# Check if commit1 is an ancestor of commit2 (i.e., if commit1 comes before commit2 in the history)
if $(git merge-base --is-ancestor $commit1 $commit2); then
  # If commit1 is an ancestor of commit2, it means the graph is valid, and history is intact
  echo "Graph Validated"
  exit 0  # Exit with success status

# Check if commit2 is an ancestor of commit1 (i.e., if commit2 comes before commit1 in the history)
elif $(git merge-base --is-ancestor $commit2 $commit1); then
  # If commit2 is an ancestor of commit1, it also means the graph is valid
  echo "Graph Validated"
  exit 0  # Exit with success status

else
  # If neither of the above conditions is true, it means the commit history is not linear
  echo "Git Graph needs to be rebased to maintain its git history"
  exit 1  # Exit with an error status
fi
